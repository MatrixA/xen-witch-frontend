/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace XENCrypto {
  export type MintInfoStruct = {
    user: string;
    term: BigNumberish;
    maturityTs: BigNumberish;
    rank: BigNumberish;
    amplifier: BigNumberish;
    eaaRate: BigNumberish;
  };

  export type MintInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    term: BigNumber;
    maturityTs: BigNumber;
    rank: BigNumber;
    amplifier: BigNumber;
    eaaRate: BigNumber;
  };

  export type StakeInfoStruct = {
    term: BigNumberish;
    maturityTs: BigNumberish;
    amount: BigNumberish;
    apy: BigNumberish;
  };

  export type StakeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    term: BigNumber;
    maturityTs: BigNumber;
    amount: BigNumber;
    apy: BigNumber;
  };
}

export interface IXenInterface extends utils.Interface {
  functions: {
    "AUTHORS()": FunctionFragment;
    "DAYS_IN_YEAR()": FunctionFragment;
    "EAA_PM_START()": FunctionFragment;
    "EAA_PM_STEP()": FunctionFragment;
    "EAA_RANK_STEP()": FunctionFragment;
    "GENESIS_RANK()": FunctionFragment;
    "MAX_PENALTY_PCT()": FunctionFragment;
    "MAX_TERM_END()": FunctionFragment;
    "MAX_TERM_START()": FunctionFragment;
    "MIN_TERM()": FunctionFragment;
    "REWARD_AMPLIFIER_END()": FunctionFragment;
    "REWARD_AMPLIFIER_START()": FunctionFragment;
    "SECONDS_IN_DAY()": FunctionFragment;
    "TERM_AMPLIFIER()": FunctionFragment;
    "TERM_AMPLIFIER_THRESHOLD()": FunctionFragment;
    "WITHDRAWAL_WINDOW_DAYS()": FunctionFragment;
    "XEN_APY_DAYS_STEP()": FunctionFragment;
    "XEN_APY_END()": FunctionFragment;
    "XEN_APY_START()": FunctionFragment;
    "XEN_MIN_BURN()": FunctionFragment;
    "XEN_MIN_STAKE()": FunctionFragment;
    "activeMinters()": FunctionFragment;
    "activeStakes()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "claimMintReward()": FunctionFragment;
    "claimMintRewardAndShare(address,uint256)": FunctionFragment;
    "claimMintRewardAndStake(uint256,uint256)": FunctionFragment;
    "claimRank(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "genesisTs()": FunctionFragment;
    "getCurrentAMP()": FunctionFragment;
    "getCurrentAPY()": FunctionFragment;
    "getCurrentEAAR()": FunctionFragment;
    "getCurrentMaxTerm()": FunctionFragment;
    "getGrossReward(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getUserMint()": FunctionFragment;
    "getUserStake()": FunctionFragment;
    "globalRank()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalXenStaked()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userBurns(address)": FunctionFragment;
    "userMints(address)": FunctionFragment;
    "userStakes(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AUTHORS"
      | "DAYS_IN_YEAR"
      | "EAA_PM_START"
      | "EAA_PM_STEP"
      | "EAA_RANK_STEP"
      | "GENESIS_RANK"
      | "MAX_PENALTY_PCT"
      | "MAX_TERM_END"
      | "MAX_TERM_START"
      | "MIN_TERM"
      | "REWARD_AMPLIFIER_END"
      | "REWARD_AMPLIFIER_START"
      | "SECONDS_IN_DAY"
      | "TERM_AMPLIFIER"
      | "TERM_AMPLIFIER_THRESHOLD"
      | "WITHDRAWAL_WINDOW_DAYS"
      | "XEN_APY_DAYS_STEP"
      | "XEN_APY_END"
      | "XEN_APY_START"
      | "XEN_MIN_BURN"
      | "XEN_MIN_STAKE"
      | "activeMinters"
      | "activeStakes"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "claimMintReward"
      | "claimMintRewardAndShare"
      | "claimMintRewardAndStake"
      | "claimRank"
      | "decimals"
      | "decreaseAllowance"
      | "genesisTs"
      | "getCurrentAMP"
      | "getCurrentAPY"
      | "getCurrentEAAR"
      | "getCurrentMaxTerm"
      | "getGrossReward"
      | "getUserMint"
      | "getUserStake"
      | "globalRank"
      | "increaseAllowance"
      | "name"
      | "stake"
      | "symbol"
      | "totalSupply"
      | "totalXenStaked"
      | "transfer"
      | "transferFrom"
      | "userBurns"
      | "userMints"
      | "userStakes"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AUTHORS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DAYS_IN_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EAA_PM_START",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EAA_PM_STEP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EAA_RANK_STEP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENESIS_RANK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PENALTY_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TERM_END",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TERM_START",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_TERM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REWARD_AMPLIFIER_END",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_AMPLIFIER_START",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_IN_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TERM_AMPLIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TERM_AMPLIFIER_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_WINDOW_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "XEN_APY_DAYS_STEP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "XEN_APY_END",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "XEN_APY_START",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "XEN_MIN_BURN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "XEN_MIN_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeMinters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMintReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimMintRewardAndShare",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMintRewardAndStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRank",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "genesisTs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAPY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEAAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMaxTerm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGrossReward",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalRank",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalXenStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userBurns", values: [string]): string;
  encodeFunctionData(functionFragment: "userMints", values: [string]): string;
  encodeFunctionData(functionFragment: "userStakes", values: [string]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "AUTHORS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DAYS_IN_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EAA_PM_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EAA_PM_STEP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EAA_RANK_STEP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENESIS_RANK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PENALTY_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TERM_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TERM_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_TERM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_AMPLIFIER_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_AMPLIFIER_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_IN_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TERM_AMPLIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TERM_AMPLIFIER_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_WINDOW_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "XEN_APY_DAYS_STEP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "XEN_APY_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "XEN_APY_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "XEN_MIN_BURN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "XEN_MIN_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimMintReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMintRewardAndShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMintRewardAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimRank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "genesisTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEAAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMaxTerm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrossReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "globalRank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalXenStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBurns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userMints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "MintClaimed(address,uint256)": EventFragment;
    "RankClaimed(address,uint256,uint256)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RankClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MintClaimedEventObject {
  user: string;
  rewardAmount: BigNumber;
}
export type MintClaimedEvent = TypedEvent<
  [string, BigNumber],
  MintClaimedEventObject
>;

export type MintClaimedEventFilter = TypedEventFilter<MintClaimedEvent>;

export interface RankClaimedEventObject {
  user: string;
  term: BigNumber;
  rank: BigNumber;
}
export type RankClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RankClaimedEventObject
>;

export type RankClaimedEventFilter = TypedEventFilter<RankClaimedEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
  term: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
  reward: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IXen extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IXenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTHORS(overrides?: CallOverrides): Promise<[string]>;

    DAYS_IN_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    EAA_PM_START(overrides?: CallOverrides): Promise<[BigNumber]>;

    EAA_PM_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    EAA_RANK_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    GENESIS_RANK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PENALTY_PCT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TERM_END(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TERM_START(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_TERM(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_AMPLIFIER_END(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_AMPLIFIER_START(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    TERM_AMPLIFIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    TERM_AMPLIFIER_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    WITHDRAWAL_WINDOW_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    XEN_APY_DAYS_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    XEN_APY_END(overrides?: CallOverrides): Promise<[BigNumber]>;

    XEN_APY_START(overrides?: CallOverrides): Promise<[BigNumber]>;

    XEN_MIN_BURN(overrides?: CallOverrides): Promise<[BigNumber]>;

    XEN_MIN_STAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeMinters(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeStakes(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMintReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMintRewardAndShare(
      other: string,
      pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMintRewardAndStake(
      pct: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRank(
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genesisTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentEAAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentMaxTerm(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGrossReward(
      rankDelta: BigNumberish,
      amplifier: BigNumberish,
      term: BigNumberish,
      eaa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserMint(
      overrides?: CallOverrides
    ): Promise<[XENCrypto.MintInfoStructOutput]>;

    getUserStake(
      overrides?: CallOverrides
    ): Promise<[XENCrypto.StakeInfoStructOutput]>;

    globalRank(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    stake(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalXenStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBurns(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userMints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        user: string;
        term: BigNumber;
        maturityTs: BigNumber;
        rank: BigNumber;
        amplifier: BigNumber;
        eaaRate: BigNumber;
      }
    >;

    userStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        term: BigNumber;
        maturityTs: BigNumber;
        amount: BigNumber;
        apy: BigNumber;
      }
    >;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUTHORS(overrides?: CallOverrides): Promise<string>;

  DAYS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  EAA_PM_START(overrides?: CallOverrides): Promise<BigNumber>;

  EAA_PM_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  EAA_RANK_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  GENESIS_RANK(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PENALTY_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TERM_END(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TERM_START(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_TERM(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_AMPLIFIER_END(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_AMPLIFIER_START(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_IN_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  TERM_AMPLIFIER(overrides?: CallOverrides): Promise<BigNumber>;

  TERM_AMPLIFIER_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  WITHDRAWAL_WINDOW_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  XEN_APY_DAYS_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  XEN_APY_END(overrides?: CallOverrides): Promise<BigNumber>;

  XEN_APY_START(overrides?: CallOverrides): Promise<BigNumber>;

  XEN_MIN_BURN(overrides?: CallOverrides): Promise<BigNumber>;

  XEN_MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  activeMinters(overrides?: CallOverrides): Promise<BigNumber>;

  activeStakes(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMintReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMintRewardAndShare(
    other: string,
    pct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMintRewardAndStake(
    pct: BigNumberish,
    term: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRank(
    term: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genesisTs(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentAMP(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentEAAR(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentMaxTerm(overrides?: CallOverrides): Promise<BigNumber>;

  getGrossReward(
    rankDelta: BigNumberish,
    amplifier: BigNumberish,
    term: BigNumberish,
    eaa: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserMint(
    overrides?: CallOverrides
  ): Promise<XENCrypto.MintInfoStructOutput>;

  getUserStake(
    overrides?: CallOverrides
  ): Promise<XENCrypto.StakeInfoStructOutput>;

  globalRank(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  stake(
    amount: BigNumberish,
    term: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalXenStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBurns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userMints(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      user: string;
      term: BigNumber;
      maturityTs: BigNumber;
      rank: BigNumber;
      amplifier: BigNumber;
      eaaRate: BigNumber;
    }
  >;

  userStakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      term: BigNumber;
      maturityTs: BigNumber;
      amount: BigNumber;
      apy: BigNumber;
    }
  >;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTHORS(overrides?: CallOverrides): Promise<string>;

    DAYS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    EAA_PM_START(overrides?: CallOverrides): Promise<BigNumber>;

    EAA_PM_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    EAA_RANK_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_RANK(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PENALTY_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TERM_END(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TERM_START(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TERM(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_AMPLIFIER_END(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_AMPLIFIER_START(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    TERM_AMPLIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    TERM_AMPLIFIER_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_WINDOW_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_APY_DAYS_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_APY_END(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_APY_START(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_MIN_BURN(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    activeMinters(overrides?: CallOverrides): Promise<BigNumber>;

    activeStakes(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMintReward(overrides?: CallOverrides): Promise<void>;

    claimMintRewardAndShare(
      other: string,
      pct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMintRewardAndStake(
      pct: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRank(term: BigNumberish, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    genesisTs(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAMP(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEAAR(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentMaxTerm(overrides?: CallOverrides): Promise<BigNumber>;

    getGrossReward(
      rankDelta: BigNumberish,
      amplifier: BigNumberish,
      term: BigNumberish,
      eaa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMint(
      overrides?: CallOverrides
    ): Promise<XENCrypto.MintInfoStructOutput>;

    getUserStake(
      overrides?: CallOverrides
    ): Promise<XENCrypto.StakeInfoStructOutput>;

    globalRank(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    stake(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalXenStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userBurns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userMints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        user: string;
        term: BigNumber;
        maturityTs: BigNumber;
        rank: BigNumber;
        amplifier: BigNumber;
        eaaRate: BigNumber;
      }
    >;

    userStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        term: BigNumber;
        maturityTs: BigNumber;
        amount: BigNumber;
        apy: BigNumber;
      }
    >;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "MintClaimed(address,uint256)"(
      user?: string | null,
      rewardAmount?: null
    ): MintClaimedEventFilter;
    MintClaimed(
      user?: string | null,
      rewardAmount?: null
    ): MintClaimedEventFilter;

    "RankClaimed(address,uint256,uint256)"(
      user?: string | null,
      term?: null,
      rank?: null
    ): RankClaimedEventFilter;
    RankClaimed(
      user?: string | null,
      term?: null,
      rank?: null
    ): RankClaimedEventFilter;

    "Staked(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      term?: null
    ): StakedEventFilter;
    Staked(user?: string | null, amount?: null, term?: null): StakedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdrawn(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      reward?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: string | null,
      amount?: null,
      reward?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    AUTHORS(overrides?: CallOverrides): Promise<BigNumber>;

    DAYS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    EAA_PM_START(overrides?: CallOverrides): Promise<BigNumber>;

    EAA_PM_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    EAA_RANK_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_RANK(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PENALTY_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TERM_END(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TERM_START(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TERM(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_AMPLIFIER_END(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_AMPLIFIER_START(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    TERM_AMPLIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    TERM_AMPLIFIER_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_WINDOW_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_APY_DAYS_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_APY_END(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_APY_START(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_MIN_BURN(overrides?: CallOverrides): Promise<BigNumber>;

    XEN_MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    activeMinters(overrides?: CallOverrides): Promise<BigNumber>;

    activeStakes(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMintReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMintRewardAndShare(
      other: string,
      pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMintRewardAndStake(
      pct: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRank(
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genesisTs(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAMP(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEAAR(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentMaxTerm(overrides?: CallOverrides): Promise<BigNumber>;

    getGrossReward(
      rankDelta: BigNumberish,
      amplifier: BigNumberish,
      term: BigNumberish,
      eaa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMint(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStake(overrides?: CallOverrides): Promise<BigNumber>;

    globalRank(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalXenStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBurns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userMints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTHORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAYS_IN_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EAA_PM_START(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EAA_PM_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EAA_RANK_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GENESIS_RANK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PENALTY_PCT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TERM_END(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TERM_START(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_TERM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_AMPLIFIER_END(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_AMPLIFIER_START(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TERM_AMPLIFIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TERM_AMPLIFIER_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAWAL_WINDOW_DAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    XEN_APY_DAYS_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    XEN_APY_END(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    XEN_APY_START(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    XEN_MIN_BURN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    XEN_MIN_STAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeMinters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeStakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMintReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMintRewardAndShare(
      other: string,
      pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMintRewardAndStake(
      pct: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRank(
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genesisTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentAMP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEAAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentMaxTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGrossReward(
      rankDelta: BigNumberish,
      amplifier: BigNumberish,
      term: BigNumberish,
      eaa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalRank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      term: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalXenStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBurns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userMints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
